// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: flash_sale_submodule/social.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SocialSharingService_ShareDeal_FullMethodName       = "/proto.SocialSharingService/ShareDeal"
	SocialSharingService_GetSharingStats_FullMethodName = "/proto.SocialSharingService/GetSharingStats"
)

// SocialSharingServiceClient is the client API for SocialSharingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialSharingServiceClient interface {
	ShareDeal(ctx context.Context, in *ShareDealReq, opts ...grpc.CallOption) (*Void, error)
	GetSharingStats(ctx context.Context, in *GetSharingStatsReq, opts ...grpc.CallOption) (*SharingStatsRes, error)
}

type socialSharingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialSharingServiceClient(cc grpc.ClientConnInterface) SocialSharingServiceClient {
	return &socialSharingServiceClient{cc}
}

func (c *socialSharingServiceClient) ShareDeal(ctx context.Context, in *ShareDealReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, SocialSharingService_ShareDeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialSharingServiceClient) GetSharingStats(ctx context.Context, in *GetSharingStatsReq, opts ...grpc.CallOption) (*SharingStatsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SharingStatsRes)
	err := c.cc.Invoke(ctx, SocialSharingService_GetSharingStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialSharingServiceServer is the server API for SocialSharingService service.
// All implementations must embed UnimplementedSocialSharingServiceServer
// for forward compatibility
type SocialSharingServiceServer interface {
	ShareDeal(context.Context, *ShareDealReq) (*Void, error)
	GetSharingStats(context.Context, *GetSharingStatsReq) (*SharingStatsRes, error)
	mustEmbedUnimplementedSocialSharingServiceServer()
}

// UnimplementedSocialSharingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSocialSharingServiceServer struct {
}

func (UnimplementedSocialSharingServiceServer) ShareDeal(context.Context, *ShareDealReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareDeal not implemented")
}
func (UnimplementedSocialSharingServiceServer) GetSharingStats(context.Context, *GetSharingStatsReq) (*SharingStatsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSharingStats not implemented")
}
func (UnimplementedSocialSharingServiceServer) mustEmbedUnimplementedSocialSharingServiceServer() {}

// UnsafeSocialSharingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialSharingServiceServer will
// result in compilation errors.
type UnsafeSocialSharingServiceServer interface {
	mustEmbedUnimplementedSocialSharingServiceServer()
}

func RegisterSocialSharingServiceServer(s grpc.ServiceRegistrar, srv SocialSharingServiceServer) {
	s.RegisterService(&SocialSharingService_ServiceDesc, srv)
}

func _SocialSharingService_ShareDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareDealReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialSharingServiceServer).ShareDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialSharingService_ShareDeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialSharingServiceServer).ShareDeal(ctx, req.(*ShareDealReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialSharingService_GetSharingStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSharingStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialSharingServiceServer).GetSharingStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialSharingService_GetSharingStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialSharingServiceServer).GetSharingStats(ctx, req.(*GetSharingStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialSharingService_ServiceDesc is the grpc.ServiceDesc for SocialSharingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialSharingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SocialSharingService",
	HandlerType: (*SocialSharingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShareDeal",
			Handler:    _SocialSharingService_ShareDeal_Handler,
		},
		{
			MethodName: "GetSharingStats",
			Handler:    _SocialSharingService_GetSharingStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flash_sale_submodule/social.proto",
}
