// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: flash_sale_submodule/flash_sales_products.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FlashSaleProductService_CreateFlashSaleProduct_FullMethodName   = "/proto.FlashSaleProductService/CreateFlashSaleProduct"
	FlashSaleProductService_UpdateFlashSaleProduct_FullMethodName   = "/proto.FlashSaleProductService/UpdateFlashSaleProduct"
	FlashSaleProductService_ListAllFlashSaleProducts_FullMethodName = "/proto.FlashSaleProductService/ListAllFlashSaleProducts"
	FlashSaleProductService_GetFlashSaleProduct_FullMethodName      = "/proto.FlashSaleProductService/GetFlashSaleProduct"
	FlashSaleProductService_DeleteFlashSaleProduct_FullMethodName   = "/proto.FlashSaleProductService/DeleteFlashSaleProduct"
)

// FlashSaleProductServiceClient is the client API for FlashSaleProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlashSaleProductServiceClient interface {
	CreateFlashSaleProduct(ctx context.Context, in *CreateFlashSaleProductReq, opts ...grpc.CallOption) (*Void, error)
	UpdateFlashSaleProduct(ctx context.Context, in *UpdateFlashSaleProductReq, opts ...grpc.CallOption) (*Void, error)
	ListAllFlashSaleProducts(ctx context.Context, in *ListAllFlashSaleProductsReq, opts ...grpc.CallOption) (*ListAllFlashSaleProductsRes, error)
	GetFlashSaleProduct(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*FlashSaleProduct, error)
	DeleteFlashSaleProduct(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error)
}

type flashSaleProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlashSaleProductServiceClient(cc grpc.ClientConnInterface) FlashSaleProductServiceClient {
	return &flashSaleProductServiceClient{cc}
}

func (c *flashSaleProductServiceClient) CreateFlashSaleProduct(ctx context.Context, in *CreateFlashSaleProductReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, FlashSaleProductService_CreateFlashSaleProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleProductServiceClient) UpdateFlashSaleProduct(ctx context.Context, in *UpdateFlashSaleProductReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, FlashSaleProductService_UpdateFlashSaleProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleProductServiceClient) ListAllFlashSaleProducts(ctx context.Context, in *ListAllFlashSaleProductsReq, opts ...grpc.CallOption) (*ListAllFlashSaleProductsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllFlashSaleProductsRes)
	err := c.cc.Invoke(ctx, FlashSaleProductService_ListAllFlashSaleProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleProductServiceClient) GetFlashSaleProduct(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*FlashSaleProduct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlashSaleProduct)
	err := c.cc.Invoke(ctx, FlashSaleProductService_GetFlashSaleProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleProductServiceClient) DeleteFlashSaleProduct(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, FlashSaleProductService_DeleteFlashSaleProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlashSaleProductServiceServer is the server API for FlashSaleProductService service.
// All implementations must embed UnimplementedFlashSaleProductServiceServer
// for forward compatibility
type FlashSaleProductServiceServer interface {
	CreateFlashSaleProduct(context.Context, *CreateFlashSaleProductReq) (*Void, error)
	UpdateFlashSaleProduct(context.Context, *UpdateFlashSaleProductReq) (*Void, error)
	ListAllFlashSaleProducts(context.Context, *ListAllFlashSaleProductsReq) (*ListAllFlashSaleProductsRes, error)
	GetFlashSaleProduct(context.Context, *GetById) (*FlashSaleProduct, error)
	DeleteFlashSaleProduct(context.Context, *GetById) (*Void, error)
	mustEmbedUnimplementedFlashSaleProductServiceServer()
}

// UnimplementedFlashSaleProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlashSaleProductServiceServer struct {
}

func (UnimplementedFlashSaleProductServiceServer) CreateFlashSaleProduct(context.Context, *CreateFlashSaleProductReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlashSaleProduct not implemented")
}
func (UnimplementedFlashSaleProductServiceServer) UpdateFlashSaleProduct(context.Context, *UpdateFlashSaleProductReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlashSaleProduct not implemented")
}
func (UnimplementedFlashSaleProductServiceServer) ListAllFlashSaleProducts(context.Context, *ListAllFlashSaleProductsReq) (*ListAllFlashSaleProductsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllFlashSaleProducts not implemented")
}
func (UnimplementedFlashSaleProductServiceServer) GetFlashSaleProduct(context.Context, *GetById) (*FlashSaleProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlashSaleProduct not implemented")
}
func (UnimplementedFlashSaleProductServiceServer) DeleteFlashSaleProduct(context.Context, *GetById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlashSaleProduct not implemented")
}
func (UnimplementedFlashSaleProductServiceServer) mustEmbedUnimplementedFlashSaleProductServiceServer() {
}

// UnsafeFlashSaleProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlashSaleProductServiceServer will
// result in compilation errors.
type UnsafeFlashSaleProductServiceServer interface {
	mustEmbedUnimplementedFlashSaleProductServiceServer()
}

func RegisterFlashSaleProductServiceServer(s grpc.ServiceRegistrar, srv FlashSaleProductServiceServer) {
	s.RegisterService(&FlashSaleProductService_ServiceDesc, srv)
}

func _FlashSaleProductService_CreateFlashSaleProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlashSaleProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleProductServiceServer).CreateFlashSaleProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleProductService_CreateFlashSaleProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleProductServiceServer).CreateFlashSaleProduct(ctx, req.(*CreateFlashSaleProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleProductService_UpdateFlashSaleProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlashSaleProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleProductServiceServer).UpdateFlashSaleProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleProductService_UpdateFlashSaleProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleProductServiceServer).UpdateFlashSaleProduct(ctx, req.(*UpdateFlashSaleProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleProductService_ListAllFlashSaleProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllFlashSaleProductsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleProductServiceServer).ListAllFlashSaleProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleProductService_ListAllFlashSaleProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleProductServiceServer).ListAllFlashSaleProducts(ctx, req.(*ListAllFlashSaleProductsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleProductService_GetFlashSaleProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleProductServiceServer).GetFlashSaleProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleProductService_GetFlashSaleProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleProductServiceServer).GetFlashSaleProduct(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleProductService_DeleteFlashSaleProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleProductServiceServer).DeleteFlashSaleProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleProductService_DeleteFlashSaleProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleProductServiceServer).DeleteFlashSaleProduct(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

// FlashSaleProductService_ServiceDesc is the grpc.ServiceDesc for FlashSaleProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlashSaleProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FlashSaleProductService",
	HandlerType: (*FlashSaleProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlashSaleProduct",
			Handler:    _FlashSaleProductService_CreateFlashSaleProduct_Handler,
		},
		{
			MethodName: "UpdateFlashSaleProduct",
			Handler:    _FlashSaleProductService_UpdateFlashSaleProduct_Handler,
		},
		{
			MethodName: "ListAllFlashSaleProducts",
			Handler:    _FlashSaleProductService_ListAllFlashSaleProducts_Handler,
		},
		{
			MethodName: "GetFlashSaleProduct",
			Handler:    _FlashSaleProductService_GetFlashSaleProduct_Handler,
		},
		{
			MethodName: "DeleteFlashSaleProduct",
			Handler:    _FlashSaleProductService_DeleteFlashSaleProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flash_sale_submodule/flash_sales_products.proto",
}
