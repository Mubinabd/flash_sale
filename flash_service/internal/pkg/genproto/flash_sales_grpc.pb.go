// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: flash_sale_submodule/flash_sales.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FlashSaleService_CreateFlashSale_FullMethodName            = "/proto.FlashSaleService/CreateFlashSale"
	FlashSaleService_UpdateFlashSale_FullMethodName            = "/proto.FlashSaleService/UpdateFlashSale"
	FlashSaleService_ListAllFlashSales_FullMethodName          = "/proto.FlashSaleService/ListAllFlashSales"
	FlashSaleService_GetFlashSale_FullMethodName               = "/proto.FlashSaleService/GetFlashSale"
	FlashSaleService_DeleteFlashSale_FullMethodName            = "/proto.FlashSaleService/DeleteFlashSale"
	FlashSaleService_AddProductToFlashSale_FullMethodName      = "/proto.FlashSaleService/AddProductToFlashSale"
	FlashSaleService_RemoveProductFromFlashSale_FullMethodName = "/proto.FlashSaleService/RemoveProductFromFlashSale"
	FlashSaleService_CancelFlashSale_FullMethodName            = "/proto.FlashSaleService/CancelFlashSale"
	FlashSaleService_GetStoreLocation_FullMethodName           = "/proto.FlashSaleService/GetStoreLocation"
)

// FlashSaleServiceClient is the client API for FlashSaleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlashSaleServiceClient interface {
	CreateFlashSale(ctx context.Context, in *CreateFlashSalesReq, opts ...grpc.CallOption) (*Void, error)
	UpdateFlashSale(ctx context.Context, in *UpdateFlashSalesReq, opts ...grpc.CallOption) (*Void, error)
	ListAllFlashSales(ctx context.Context, in *ListAllFlashSalesReq, opts ...grpc.CallOption) (*ListAllFlashSalesRes, error)
	GetFlashSale(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*FlashSale, error)
	DeleteFlashSale(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error)
	AddProductToFlashSale(ctx context.Context, in *AddProductReq, opts ...grpc.CallOption) (*Void, error)
	RemoveProductFromFlashSale(ctx context.Context, in *RemoveProductReq, opts ...grpc.CallOption) (*Void, error)
	CancelFlashSale(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*CancelFlashSaleRes, error)
	GetStoreLocation(ctx context.Context, in *GetStoreLocationReq, opts ...grpc.CallOption) (*StoreLocation, error)
}

type flashSaleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlashSaleServiceClient(cc grpc.ClientConnInterface) FlashSaleServiceClient {
	return &flashSaleServiceClient{cc}
}

func (c *flashSaleServiceClient) CreateFlashSale(ctx context.Context, in *CreateFlashSalesReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, FlashSaleService_CreateFlashSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleServiceClient) UpdateFlashSale(ctx context.Context, in *UpdateFlashSalesReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, FlashSaleService_UpdateFlashSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleServiceClient) ListAllFlashSales(ctx context.Context, in *ListAllFlashSalesReq, opts ...grpc.CallOption) (*ListAllFlashSalesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllFlashSalesRes)
	err := c.cc.Invoke(ctx, FlashSaleService_ListAllFlashSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleServiceClient) GetFlashSale(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*FlashSale, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlashSale)
	err := c.cc.Invoke(ctx, FlashSaleService_GetFlashSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleServiceClient) DeleteFlashSale(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, FlashSaleService_DeleteFlashSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleServiceClient) AddProductToFlashSale(ctx context.Context, in *AddProductReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, FlashSaleService_AddProductToFlashSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleServiceClient) RemoveProductFromFlashSale(ctx context.Context, in *RemoveProductReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, FlashSaleService_RemoveProductFromFlashSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleServiceClient) CancelFlashSale(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*CancelFlashSaleRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelFlashSaleRes)
	err := c.cc.Invoke(ctx, FlashSaleService_CancelFlashSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleServiceClient) GetStoreLocation(ctx context.Context, in *GetStoreLocationReq, opts ...grpc.CallOption) (*StoreLocation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreLocation)
	err := c.cc.Invoke(ctx, FlashSaleService_GetStoreLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlashSaleServiceServer is the server API for FlashSaleService service.
// All implementations must embed UnimplementedFlashSaleServiceServer
// for forward compatibility
type FlashSaleServiceServer interface {
	CreateFlashSale(context.Context, *CreateFlashSalesReq) (*Void, error)
	UpdateFlashSale(context.Context, *UpdateFlashSalesReq) (*Void, error)
	ListAllFlashSales(context.Context, *ListAllFlashSalesReq) (*ListAllFlashSalesRes, error)
	GetFlashSale(context.Context, *GetById) (*FlashSale, error)
	DeleteFlashSale(context.Context, *GetById) (*Void, error)
	AddProductToFlashSale(context.Context, *AddProductReq) (*Void, error)
	RemoveProductFromFlashSale(context.Context, *RemoveProductReq) (*Void, error)
	CancelFlashSale(context.Context, *GetById) (*CancelFlashSaleRes, error)
	GetStoreLocation(context.Context, *GetStoreLocationReq) (*StoreLocation, error)
	mustEmbedUnimplementedFlashSaleServiceServer()
}

// UnimplementedFlashSaleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlashSaleServiceServer struct {
}

func (UnimplementedFlashSaleServiceServer) CreateFlashSale(context.Context, *CreateFlashSalesReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlashSale not implemented")
}
func (UnimplementedFlashSaleServiceServer) UpdateFlashSale(context.Context, *UpdateFlashSalesReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlashSale not implemented")
}
func (UnimplementedFlashSaleServiceServer) ListAllFlashSales(context.Context, *ListAllFlashSalesReq) (*ListAllFlashSalesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllFlashSales not implemented")
}
func (UnimplementedFlashSaleServiceServer) GetFlashSale(context.Context, *GetById) (*FlashSale, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlashSale not implemented")
}
func (UnimplementedFlashSaleServiceServer) DeleteFlashSale(context.Context, *GetById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlashSale not implemented")
}
func (UnimplementedFlashSaleServiceServer) AddProductToFlashSale(context.Context, *AddProductReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToFlashSale not implemented")
}
func (UnimplementedFlashSaleServiceServer) RemoveProductFromFlashSale(context.Context, *RemoveProductReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProductFromFlashSale not implemented")
}
func (UnimplementedFlashSaleServiceServer) CancelFlashSale(context.Context, *GetById) (*CancelFlashSaleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFlashSale not implemented")
}
func (UnimplementedFlashSaleServiceServer) GetStoreLocation(context.Context, *GetStoreLocationReq) (*StoreLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreLocation not implemented")
}
func (UnimplementedFlashSaleServiceServer) mustEmbedUnimplementedFlashSaleServiceServer() {}

// UnsafeFlashSaleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlashSaleServiceServer will
// result in compilation errors.
type UnsafeFlashSaleServiceServer interface {
	mustEmbedUnimplementedFlashSaleServiceServer()
}

func RegisterFlashSaleServiceServer(s grpc.ServiceRegistrar, srv FlashSaleServiceServer) {
	s.RegisterService(&FlashSaleService_ServiceDesc, srv)
}

func _FlashSaleService_CreateFlashSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlashSalesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).CreateFlashSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_CreateFlashSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).CreateFlashSale(ctx, req.(*CreateFlashSalesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleService_UpdateFlashSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlashSalesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).UpdateFlashSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_UpdateFlashSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).UpdateFlashSale(ctx, req.(*UpdateFlashSalesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleService_ListAllFlashSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllFlashSalesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).ListAllFlashSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_ListAllFlashSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).ListAllFlashSales(ctx, req.(*ListAllFlashSalesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleService_GetFlashSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).GetFlashSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_GetFlashSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).GetFlashSale(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleService_DeleteFlashSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).DeleteFlashSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_DeleteFlashSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).DeleteFlashSale(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleService_AddProductToFlashSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).AddProductToFlashSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_AddProductToFlashSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).AddProductToFlashSale(ctx, req.(*AddProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleService_RemoveProductFromFlashSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).RemoveProductFromFlashSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_RemoveProductFromFlashSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).RemoveProductFromFlashSale(ctx, req.(*RemoveProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleService_CancelFlashSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).CancelFlashSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_CancelFlashSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).CancelFlashSale(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleService_GetStoreLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreLocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).GetStoreLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_GetStoreLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).GetStoreLocation(ctx, req.(*GetStoreLocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FlashSaleService_ServiceDesc is the grpc.ServiceDesc for FlashSaleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlashSaleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FlashSaleService",
	HandlerType: (*FlashSaleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlashSale",
			Handler:    _FlashSaleService_CreateFlashSale_Handler,
		},
		{
			MethodName: "UpdateFlashSale",
			Handler:    _FlashSaleService_UpdateFlashSale_Handler,
		},
		{
			MethodName: "ListAllFlashSales",
			Handler:    _FlashSaleService_ListAllFlashSales_Handler,
		},
		{
			MethodName: "GetFlashSale",
			Handler:    _FlashSaleService_GetFlashSale_Handler,
		},
		{
			MethodName: "DeleteFlashSale",
			Handler:    _FlashSaleService_DeleteFlashSale_Handler,
		},
		{
			MethodName: "AddProductToFlashSale",
			Handler:    _FlashSaleService_AddProductToFlashSale_Handler,
		},
		{
			MethodName: "RemoveProductFromFlashSale",
			Handler:    _FlashSaleService_RemoveProductFromFlashSale_Handler,
		},
		{
			MethodName: "CancelFlashSale",
			Handler:    _FlashSaleService_CancelFlashSale_Handler,
		},
		{
			MethodName: "GetStoreLocation",
			Handler:    _FlashSaleService_GetStoreLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flash_sale_submodule/flash_sales.proto",
}
